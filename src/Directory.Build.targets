<Project>
  <PropertyGroup>
    <!-- The Sdks\NuGet.Build.Tasks.Pack\build\NuGet.Build.Tasks.Pack.targets unconditionally sets 
        PackageId=AssemblyName if no PackageId is provided, and then defaults IsPackable=true if 
        a PackageId is set (?!), meaning that by default everything is packable in Sdk-style 
        projects. 

        The Directory.Build.targets are imported after the user's project properties have been 
        read, and therefore gives us a chance to inspect if an explicit PackageId was provided, 
        before the NuGet SDK target is imported and defaults it. At this point, we can give 
        IsPackable a more sensible default, making it false if no PackageId was provided at this 
        point. -->
    <IsPackable Condition="'$(PackageId)' == ''">false</IsPackable>
  </PropertyGroup>
  
  <!-- If a package is produced delete restored packages with the matching id
       so that re-installing latest will automatically pick up this newest package.
  -->
  <Target Name="ClearNuGetRestoreCache" Condition="!$(CI)" AfterTargets="Pack">
    <Exec Command='rd /s/q "$(NuGetPackageRoot)$(PackageId.ToLowerInvariant())"' Condition="$(OS) == 'Windows_NT' And Exists('$(NuGetPackageRoot)$(PackageId.ToLowerInvariant())')"/>
    <Exec Command='xargs rm -rf "$(NuGetPackageRoot)$(PackageId.ToLowerInvariant())"' Condition="$(OS) != 'Windows_NT' And Exists('$(NuGetPackageRoot)$(PackageId.ToLowerInvariant())')"/>
  </Target>

  <!-- Import [project].targets if it exists -->
	<Import Project="$(MSBuildProjectDirectory)\$(MSBuildProjectName).targets"
          Condition="'$(MSBuildProjectExtension)' != '.targets' And Exists('$(MSBuildProjectDirectory)\$(MSBuildProjectName).targets')" />
</Project>